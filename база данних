import sqlite3

import requests as requests


class Database:
    def __init__(self, db_name):
        self.conn = sqlite3.connect(db_name)
        self.cursor = self.conn.cursor()

    def create_tables(self):
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS links (
                id INTEGER PRIMARY KEY,
                link VARCHAR(100)
            )
        ''')
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS money (
                id INTEGER PRIMARY KEY,
                currency FLOAT,
                hrn FLOAT,
                result FLOAT
            )
        ''')
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS weather (
                id INTEGER PRIMARY KEY,
                date DATETIME,
                result VARCHAR(100)
            )
        ''')
        self.conn.commit()

    def insert_data(self, table_name, data):
        placeholders = ', '.join(['?'] * len(data))
        query = f'INSERT INTO {table_name} VALUES ({placeholders})'
        self.cursor.execute(query, data)
        self.conn.commit()

    def select_data(self, table_name, condition):
        query = f'SELECT * FROM {table_name} WHERE {condition}'
        self.cursor.execute(query)
        return self.cursor.fetchall()

    def close_connection(self):
        self.conn.close()


class BeautifulSoup:
    pass


class WebParser:
    def __init__(self):
        pass

    def parse_links(self, url):
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            links = [a['href'] for a in soup.find_all('a', href=True)]
            return links
        else:
            return []

    def parse_money(self, url):
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            return data['result']
        else:
            return None

    def parse_weather(self, url):
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            return data['weather']
        else:
            return None

class UserInterface:
    def __init__(self):
        pass

    def display_results(self, results):
        for result in results:
            print(result)

    def get_user_input(self, prompt):
        user_input = input(prompt)
        return user_input
